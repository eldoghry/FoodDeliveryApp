### üîç SQL Query Optimization Table


***** CART *****

-- getCartByCustomerId --

- Function Name : getCartByCustomerId

- Query Description: Get cart by customer id

- SQL Query : 

    *Before Optimization*
    SELECT * FROM cart
    WHERE customer_id = $1
    LIMIT 1;

    *After Optimization*
    SELECT cart_id , customer_id FROM cart
    WHERE customer_id = :customerId
    LIMIT 1;

- Time Before Optimization:  2.427 ms 

- Optimization Technique: 
   - Select only the required columns (cart_id)
   - add index on customer_id column instead automatically created index from relations in entity
    create index idx_customer_id on cart(customer_id)

- Time After Optimization:  0.027 ms 

--------------------------------------

-- getCartItems --

- Function Name : getCartItems

- Query Description: Get cart items by cart id

- SQL Query :

SELECT 
"ci"."cart_id" AS "cartId",
"ci"."cart_item_id" AS "cartItemId",
"ci"."quantity" AS "quantity",
"ci"."price" AS "price",
"ci"."total_price" AS "totalPrice",
"r"."restaurant_id" AS "restaurantId",
"r"."name" AS "restaurantName",
"i"."item_id" AS "itemId",
"i"."name" AS "itemName",
"i"."image_path" AS "imagePath",
"i"."is_available" AS "isAvailable"
FROM "cart_item" "ci"
INNER JOIN "restaurant" "r" ON "r"."restaurant_id"="ci"."restaurant_id"
INNER JOIN "item" "i" ON "i"."item_id"="ci"."item_id" AND ("i"."deleted_at" IS NULL)
WHERE "ci"."cart_id" = :cartId

- Time Before Optimization: 0.190 ms

- Optimization Technique: no need to optimize

- Time After Optimization: 0.190 ms

--------------------------------------

-- getCartWithItems -- 

- Function Name : getCartWithItems({ customerId, restaurantId})

- Query Description: Get cart with items by customer id

- SQL Query :

    *Before Optimization*
SELECT cart.*, cartItem.*
FROM cart cart
LEFT JOIN cart_item cartItem ON cartItem.cart_id = cart.cart_id
WHERE cart.customer_id = :customerId
LIMIT 1;

    *After Optimization*
explain analyze
SELECT
    cart.cart_id AS "cartId",
    cart.customer_id AS "customerId",
    cartItem.restaurant_id AS "restaurantId"
FROM
    cart cart
INNER JOIN
    cart_item cartItem ON cartItem.cart_id = cart.cart_id
WHERE
    cart.customer_id = :customerId AND cartItem.restaurant_id = :restaurantId
LIMIT 1;

- Time Before Optimization: 21.514 ms

- Optimization Technique:
   - Use INNER JOIN instead of LEFT JOIN
   - Select only the required columns
   - create composite index on cartItem for columns (cart_id, restaurant_id)
    create index idx_cart_id_restaurant_id on cart_item(cart_id,restaurant_id)

- Time After Optimization: 0.077 ms

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

** ORDER **

- Function Name : getOrdersByActorId

- Query Description: Get orders history for customer or restaurant

- SQL Query :

    *Before Optimization*

        SELECT 
            order.*,
            restaurant.*,
            customer.*,
            user.*,
            orderItems.*,
            item.*,
            transaction.*,
            paymentMethod.*
        FROM 
            order order
        LEFT JOIN 
            restaurant restaurant ON restaurant.id = order.restaurant_id
        LEFT JOIN 
            customer customer ON customer.id = order.customer_id
        LEFT JOIN 
            user user ON user.id = customer.user_id
        LEFT JOIN 
            order_item orderItems ON orderItems.order_id = order.id
        LEFT JOIN 
            item item ON item.id = orderItems.item_id AND ("item"."deleted_at" IS NULL)
        LEFT JOIN 
            transaction transaction ON transaction.order_id = order.id
        LEFT JOIN 
            payment_method paymentMethod ON paymentMethod.id = transaction.payment_method_id
        WHERE 
            (order.customer_id = :actorId OR order.restaurant_id = :actorId)
            AND order.created_at < :cursorDate
        ORDER BY 
            order.created_at DESC
        LIMIT 
            :limitPlusOne;

    *After Optimization*

        SELECT 
            "order".*,
            restaurant.name,
            customer.customer_id,
            customer.user_id,
            "user".name,
            "user".phone,
            orderItems.*,
            item.image_path,
            item.name,
            paymentMethod.code
        FROM 
            "order" "order"
        LEFT JOIN 
            restaurant restaurant ON restaurant.restaurant_id = "order".restaurant_id
        LEFT JOIN 
            customer customer ON customer.customer_id = "order".customer_id
        LEFT JOIN 
            "user" "user" ON "user".user_id = customer.user_id
        LEFT JOIN 
            order_item orderItems ON orderItems.order_id = "order".order_id
        LEFT JOIN 
            item item ON item.item_id = orderItems.item_id AND ("item"."deleted_at" IS NULL)
        LEFT JOIN 
            payment_method paymentMethod ON paymentMethod.payment_method_id = "order".payment_method_id
        WHERE 
            "order".customer_id = :actorId AND "order".created_at < :cursorDate
        ORDER BY 
            "order".created_at DESC
        LIMIT 
            :limitPlusOne;

- Time Before Optimization: 1018.376 ms

- Optimization Technique:
   - add payment_method_id column to order table for faster join
   - select only required columns
   - create composite index on order table for columns (customer_id, created_at)
    CREATE INDEX idx_order_customer_createdat ON "order" (customer_id, created_at DESC);
   - create insex on order_item for columns (order_id)
    CREATE INDEX idx_order_id on order_item(order_id)

- Time After Optimization: 6.551 ms

--------------------------------------

- Function Name :  getOrderById

- Query Description: 

- SQL Query :
getOrderById({ orderId, relations: ['restaurant'] })
SELECT 
    "order".order_id,
    "order".customer_id,
    "order".status,
    "restaurant".restaurant_id,
    "restaurant".email
FROM 
    "order" "order"
LEFT JOIN 
    "restaurant" "restaurant" ON "restaurant"."restaurant_id" = "order"."restaurant_id"
WHERE 
    "order"."order_id" = 1007503
LIMIT 1;

-- Execution Time: 3.957 ms

**getOrderById({ orderId, relations: ['orderStatusLogs'] })**
SELECT 
    "order".*,
    "orderStatusLogs".*
FROM 
    "order" "order"
LEFT JOIN 
    "order_status_log" "orderStatusLogs" 
    ON "orderStatusLogs"."order_id" = "order"."order_id"
WHERE 
    "order"."order_id" = 105321
LIMIT 1;

- Time Before Optimization:351.022 ms

- Optimization Technique:
 - create index on order_status_log for columns (order_id)
  CREATE INDEX idx_order_status_log_order_id ON order_status_log(order_id)

- Time After Optimization:0.267 ms

getOrderById({ orderId, relations: ['orderItems'] })
SELECT 
    "order".*,
    "orderItems".*
FROM 
    "order" "order"
LEFT JOIN 
    "order_item" "orderItems" 
    ON "orderItems"."order_id" = "order"."order_id"
WHERE 
    "order"."order_id" = 10
LIMIT 1;

-- Execution Time: 2.288 ms (no need to optimize)

getOrderById({orderId,relations: ['rating']})
SELECT 
    "order".*,
    "rating".*
FROM 
    "order" "order"
LEFT JOIN 
    "rating" "rating" 
    ON "rating"."order_id" = "order"."order_id"
WHERE 
    "order"."order_id" = 20
LIMIT 1;

--Execution Time: 2.737 ms (no need to optimize)

getOrderById({orderId,relations: ['restaurant', 'customer.user', 'orderItems.item', 'paymentMethod']})
SELECT  
    "order".*,
    "restaurant".*,
    "customer".*,
    "user".*,
    "orderItems".*,
    "item".*,
    "paymentMethod".*
FROM 
    "order" "order"
LEFT JOIN 
    "restaurant" "restaurant" 
    ON "restaurant"."restaurant_id" = "order"."restaurant_id"
LEFT JOIN 
    "customer" "customer" 
    ON "customer"."customer_id" = "order"."customer_id"
LEFT JOIN 
    "user" "user" 
    ON "user"."user_id" = "customer"."user_id"
LEFT JOIN 
    "order_item" "orderItems" 
    ON "orderItems"."order_id" = "order"."order_id"
LEFT JOIN 
    "item" "item" 
    ON "item"."item_id" = "orderItems"."item_id"
LEFT JOIN 
    "payment_method" "paymentMethod" 
    ON "paymentMethod"."payment_method_id" = "order"."payment_method_id"
WHERE 
    "order"."order_id" = 4422
LIMIT 1;

-- Execution Time: 4.217 ms (no need to optimize)

--------------------------------------
- Function Name : getOrderSummary(orderId)

- Query Description: Get order summary by order id

- SQL Query :

SELECT 
    r.name AS restaurant_name,
    o.order_id AS orderId,
    o.status AS orderStatus,
    o.placed_at AS placedAt,
    o.total_amount AS totalAmount
FROM 
    "order" o
LEFT JOIN 
    restaurant r ON r.restaurant_id = o.restaurant_id
WHERE 
    o.order_id = :orderId
LIMIT 1;

- Time Before Optimization: 4.206 ms

- Optimization Technique: no need to optimize

- Time After Optimization: 4.206 ms

--------------------------------------

- Function Name : getActiveOrderByRestaurantId(restaurantId)

- Query Description: Get active order by restaurant id

- SQL Query :
 *Before Optimization*
 
SELECT 
    "order".*
FROM 
    "order" "order"
WHERE 
    ("order"."status" NOT IN ('delivered', 'canceled', 'failed'))
    AND "order"."restaurant_id" = :restaurantId
LIMIT 1;

*After Optimization*

SELECT 
    "order".order_id
FROM 
    "order" "order"
WHERE 
    ("order"."status" NOT IN ('delivered', 'canceled', 'failed'))
    AND "order"."restaurant_id" = :restaurantId
LIMIT 1;

- Time Before Optimization: 493.672 ms

- Optimization Technique:
   - select only one column
   - create indexes on order table for columns (restaurant_id) & (status)
    CREATE INDEX idx_order_restaurant_id ON "order" (restaurant_id);
    CREATE INDEX idx_order_status ON "order" (status);

- Time After Optimization: 2.448 ms

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


** CUSTOMER **

- Function Name : getAddressesByCustomerId(customerId)

- Query Description: Get addresses by customer id

- SQL Query :
    SELECT 
        "address".*
    FROM 
        "address" "address"
    WHERE 
        "address"."customer_id" = 34811
    ORDER BY 
        "address"."created_at" DESC

- Time Before Optimization: 88.804 ms

- Optimization Technique:
  - create composite index on address table for (customer_id, created_at)
    CREATE INDEX idx_address_customer_created_at ON address(customer_id, created_at DESC);

- Time After Optimization: 0.250 ms

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


** RESTAURANT **

- Function Name : getRestaurantBy(name)

- Query Description: Get restaurant by restaurant name

- SQL Query :

SELECT
 "restaurant".*
 FROM "restaurant" "restaurant" 
WHERE "restaurant"."name" = :name
LIMIT 1;

- Time Before Optimization: 81.657 ms

- Optimization Technique:
   - create index on restaurant table for name column
    CREATE INDEX idx_restaurant_name ON restaurant(name);

- Time After Optimization: 0.930 ms

--------------------------------------

- Function Name :  getDetailedActiveRestaurantView(restaurantId)

- Query Description: Get details of active restaurant by restaurant id

- SQL Query :

SELECT 
    r.*,
    c.*,
    cu.*,
    m.*,
    cat.*,
    i.*
    c.*,
    cu.*,
    m.*,
    cat.*,
    i.*
FROM 
    restaurant r
LEFT JOIN 
    chain c ON c.chain_id = r.chain_id
LEFT JOIN 
    restaurant_cuisine rc ON rc.restaurant_id = r.restaurant_id
LEFT JOIN 
    cuisine cu ON cu.cuisine_id = rc.cuisine_id
LEFT JOIN 
    menu m ON m.restaurant_id = r.restaurant_id AND m.is_active = true
LEFT JOIN 
    category cat ON cat.menu_id = m.menu_id AND cat.is_active = true
LEFT JOIN 
    category_items ci ON ci.category_id = cat.category_id
LEFT JOIN 
    item i ON i.item_id = ci.item_id 
           AND i.is_available = true 
           AND i.deleted_at IS null
           
where r.restaurant_id= 1527

GROUP BY 
    r.restaurant_id,
    c.chain_id,
    cu.cuisine_id,
    m.menu_id,
    cat.category_id,
    i.item_id

- Time Before Optimization: 47.350 ms

- Optimization Technique:
- create index on category table for (menu_id, is_active)
CREATE INDEX idx_category_active_menu ON category(menu_id, is_active)

- Time After Optimization: 13.599 ms

--------------------------------------

- Function Name : getFilteredRestaurants

- Query Description: Get filtered restaurants by lat, lng, cuisines or rating, cursor

- SQL Query :

SELECT 
    "restaurant".*,
    "cuisine".*
FROM 
    "restaurant" "restaurant"
LEFT JOIN 
    "restaurant_cuisine" "restaurant_cuisines" ON "restaurant_cuisines"."restaurant_id" = "restaurant"."restaurant_id"
LEFT JOIN 
    "cuisine" "cuisine" ON "cuisine"."cuisine_id" = "restaurant_cuisines"."cuisine_id"
WHERE 
    "restaurant"."is_active" = TRUE
    AND "restaurant"."status" NOT IN ('pause')
    AND ST_DWithin(
        "restaurant"."geo_location",
        ST_SetSRID(ST_MakePoint(:lng, :lat), 4326)::geography,
        "restaurant"."max_delivery_distance"
    )
    AND (:cuisinesIds IS NULL OR "cuisine"."cuisine_id" IN (:...cuisinesIds))
    AND (:cursor IS NULL OR "restaurant"."restaurant_id" < :cursor)
GROUP BY 
    "restaurant"."restaurant_id",
    "cuisine"."cuisine_id"
HAVING 
    (:rating IS NULL OR "restaurant"."average_rating" >= :rating)
ORDER BY 
    "restaurant"."restaurant_id" DESC
LIMIT :limitPlusOne;

- Time Before Optimization: 187.566 ms

- Optimization Technique:
- create index on restaurant table for (geo_location)
 CREATE INDEX idx_restaurant_geo ON restaurant USING GIST(geo_location)
- create index on restaurant table for (is_active, status)
 CREATE INDEX idx_restaurant_active_status ON restaurant(is_active,status)
- create index on restaurant table for (average_rating)
 CREATE INDEX idx_restaurant_avg_rating ON restaurant(average_rating)

- Time After Optimization: 3.643 ms

--------------------------------------

- Function Name : 

- Query Description: 

- SQL Query :

- Time Before Optimization:

- Optimization Technique:

- Time After Optimization:


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


** MENU **

- Function Name : 

- Query Description: 

- SQL Query :

- Time Before Optimization:

- Optimization Technique:

- Time After Optimization:

